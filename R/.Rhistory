ggsave(path, width = 12, height = 8, units = "cm")
}
######
##    RISETIME
######
aes_user = aes(x = peak.value, y = RiseTime, color=Type);
y_label = "Rise Time (s)"
filename = "rise_time"
scatter_plot_peak_value(data, aes_user, y_label, filename)
######
##    visio
######
aes_user = aes(x = peak.value, y = RiseTime, color=Type);
y_label = "Rise Time (s)"
filename = "rise_time_visio"
scatter_plot_peak_value(data, aes_user, y_label, filename, 2)
##
##    FWHMT
##
aes_user = aes(x = peak.value, y = FWHMT, color=Type);
y_label = "FWHMT (s)"
filename = "fwhmt"
scatter_plot_peak_value(data, aes_user, y_label, filename);
##
##    Carrier
##
aes_user = aes(x = peak.value, y = instant.freq.carrier, color=Type);
y_label = "Central Frequency (Hz)"
filename = "carrier_f"
scatter_plot_peak_value(data, aes_user, y_label, filename);
####
##  Modulated
####
aes_user = aes(x = peak.value, y = instant.freq.mod, color=Type);
y_label = "Modulated Frequency (Hz)"
filename = "modulated_f"
scatter_plot_peak_value(data, aes_user, y_label, filename);
qqplot_scatter <-function(observed, expected, filename, name, limits) {
df <- data.frame( observed = observed,expected = expected)
ggplot(df) +
geom_point(aes(expected, observed), shape = 23, size = 4, color = "black", fill = "steelblue1", stroke = 0.3) +
geom_abline(intercept = 0, slope = 1, alpha = 0.9, size = 1.2, linetype=5) +
xlab(paste("Normal ", name, sep = "")) +
ylab(paste("Qburst ", name, sep = "")) +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
#plot.margin=grid::unit(c(0,0,0,0), "mm"),
#axis.title.y = element_text(color="black", size=14, face="bold", position = "none"),
#axis.title.x = element_text(color="black", size=14, face="bold"),
#axis.text.x = element_text(angle=0, size = 10, color = "black"),
#axis.text.y = element_text(angle=0, size = 10, color = "black")
) +
ylim(limits) +
xlim(limits)
path = paste("Comp_3/comp_3_", filename, ".pdf", sep = "");
ggsave(path, width = 12, height = 12, units = "cm")
}
####
##  FWHMT
####
observed = quantile(data$FWHMT[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$FWHMT[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "FWHMT (s)";
limits <- c(0,2);
qqplot_scatter(observed, expected, "FWHMT", name, limits)
####
##  T1
####
observed = quantile(data$T1[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$T1[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "Rise Time (s)";
limits <- c(0,0.5);
qqplot_scatter(observed, expected, "T1", name, limits)
####
##  PSD Rest band
####
observed = quantile(data$PSD.rest[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$PSD.rest[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "PSD Rest band (s)";
limits <- c(0,1e11);
qqplot_scatter(observed, expected, "PSD", name, limits)
####
##  peak Value
####
observed = quantile(data$peak.value[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$peak.value[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "Peak Value (pT)";
limits <- c(0,7e6);
qqplot_scatter(observed, expected, "peak_value", name, limits)
####
##  carrier_freq
####
observed = quantile(data$instant.freq.carrier[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$instant.freq.carrier[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "Central Frequency (Hz)";
limits <- c(6,10);
qqplot_scatter(observed, expected, "carrier_freq", name, limits)
####
##  mod_freq
####
observed = quantile(data$instant.freq.mod[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$instant.freq.mod[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "Modulated Frequency (Hz)";
limits <- c(1.5,3);
qqplot_scatter(observed, expected, "mod_freq", name, limits)
ggplot(data = data, aes(x = T1, y = T2, color=Type)) +
geom_point() +
facet_wrap(~ Type)
ggplot(data, aes(FWHMT, fill=..count.. )) +
geom_histogram(alpha = 1, color = "black", breaks=seq(0,1e10,1.7e8), aes(y=..count..), size=1.1) +
geom_density(col= "black", fill = "lightblue", alpha=0, size = 1.5) +
xlim(c(0,1e10)) +
scale_fill_gradient("Count", low="lightgreen", high="darkgreen") +
labs(title="Correlation between PSD [6-10]Hz & Peak Value",
x="PSD [6 - 10]Hz AU", y = "Peak Value (pT)", color = "PSD") + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
)
observed = quantile(values[data$type == "qburst"], probs = seq(0,1,by = 0.01));
expected = quantile(values[data$type == "normal"], probs = seq(0,1,by = 0.01));
ggplot(data, aes(x=peak.value, y = SPC, fill=SPC)) +
geom_point(size=3, shape=23) +
geom_smooth(linetype="dashed", color="darkred") +
scale_colour_gradient(  low = "black",  high = "red" ) +
labs(title="Correlation between PSD [6 - 10]Hz nd Peak Value",
x="PSD [6 - 10]Hz AU", y = "Peak Value (pT)", color = "PSD") + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
legend.title = element_blank(),
legend.position = "none"
)
####
##  Modulated
####
aes_user = aes(x = peak.value, y = instant.freq.mod, color=Type);
y_label = "Envelope Frequency (Hz)"
filename = "modulated_f"
scatter_plot_peak_value(data, aes_user, y_label, filename);
library(easyGgplot2)
library(latex2exp)
library(R.matlab)
library(ggplot2)
library(qqplotr)
library(qualityTools)
matlabFile <- readMat("r_am_sr.mat")
varNames    <- names(matlabFile$data[,,1])
datList     <- matlabFile$data
datList     <- lapply(datList, unlist, use.names=FALSE)
data        <- as.data.frame(datList)
names(data) <- varNames
# Histogram from a single numeric vector
# ggplot2.histogram(data=numVector)
# Basic histogram plot from the vector "weight"
weight = c(data$FWHMT);
data$Type[data$peak.value < 2e6] <- "Normal";
data$Type[data$peak.value >= 2e6] <- "Qburst";
data$Type <- data_clustering(data)
######
##    Peak Value
######
start_path = "Ind_1/";
ggplot(subset(data, Type != "Qburst"), aes(peak.value / 1e6, fill=..density.. )) +
geom_histogram(alpha = 1, color = "black", aes(y=..density..), size=1.1, bins = 20) +
#stat_density(col= "black", fill = "lightblue", alpha=0, size = 1.5, kernel = "gaussian", bw = 0.12) +
scale_fill_gradient("Count", low="lightblue", high="steelblue1") +
labs( x = expression(bold("Peak Value Millions " ~ (pT))), y = expression(bold("Density " ~ (1/pT)))) + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(angle=0, size = 10, color = "black"),
axis.text.y = element_text(angle=0, size = 10, color = "black"),
legend.position = "none"
)
path = paste("Ind_1/", "ind_peak_value.pdf", sep = "")
ggsave(path, width = 12, height = 8, units = "cm")
ggplot(subset(data, Type != "Qburst"), aes(peak.value / 1e6, fill=..density.. )) +
geom_histogram(alpha = 1, color = "black", aes(y=..density..), size=1.1, bins = 20) +
#stat_density(col= "black", fill = "lightblue", alpha=0, size = 1.5, kernel = "gaussian", bw = 0.12) +
scale_fill_gradient("Count", low="lightblue", high="steelblue1") +
labs( x = expression(bold("Peak Value Millions " ~ (pT))), y = expression(bold("Density " ~ (1/pT)))) + theme(
plot.title =  element_blank(),
axis.title.y =  element_blank(),
axis.title.x =  element_blank(),
axis.text.x =  element_blank(),
axis.text.y = element_blank(),
legend.position = "none"
)
path = paste("Ind_1/", "ind_peak_value_visio.pdf", sep = "")
ggsave(path, width = 12, height = 8, units = "cm")
######
##    Rise Time
######
start_path = "Ind_1/";
ggplot(subset(data, Type != "none"), aes(T1, fill=..density.. )) +
geom_histogram(alpha = 1, color = "black", aes(y=..density..), size=1.1, bins = 20) +
#stat_density(col= "black", fill = "lightblue", alpha=0, size = 1.5, kernel = "gaussian", bw = 0.02) +
scale_fill_gradient("Count", low="lightblue", high="steelblue1") +
labs( x = expression(bold("Rise Time" ~ (s))), y = expression(bold("Density " ~ (1/s)))) + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(angle=0, size = 12, color = "black"),
axis.text.y = element_text(angle=0, size = 12, color = "black"),
legend.position = "none"
)
path = paste("Ind_1/", "ind_rise_time.pdf", sep = "")
ggsave(path, width = 12, height = 8, units = "cm")
######
##    PSD IN BAND
######
start_path = "Ind_1/";
ggplot(subset(data, Type != "Qburst"), aes(PSD.in.band, fill=..density.. )) +
geom_histogram(alpha = 1, color = "black", aes(y=..density..), size=1.1, bins = 30) +
#stat_density(col= "black", fill = "lightblue", alpha=0, size = 1.5, kernel = "gaussian", bw = 0.1) +
scale_fill_gradient("Count", low="lightblue", high="steelblue1") +
labs( x = expression(bold("Band Power - First SR" ~ (pT^2))), y = expression(bold("Density " ~ (1/pT^2)))) + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(angle=0, size = 12, color = "black"),
axis.text.y = element_text(angle=0, size = 12, color = "black"),
legend.position = "none"
)
path = paste("Ind_1/", "ind_psd_in_band.pdf", sep = "")
ggsave(path, width = 12, height = 8, units = "cm")
ggplot(data = data, aes(x = peak.value, y = PSD.in.band, color=Type)) +
geom_point() +
#geom_polygon(data = hull_data, alpha = 1, aes(x = x, y = y,fill=cluster, linetype=cluster)) +
geom_smooth(linetype="dashed", color="darkred", method = "loess", formula = y ~ x) +
labs(x=expression(bold("Peak Value " ~ (pT))), y=expression(bold("Band Power - Around First SR" ~ (pT^2)))) + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
legend.position = c(.1, .95),
legend.justification = c("top"),
legend.title = element_text(face = "bold",hjust = 0.5),
legend.box.just = "left",
legend.box.background = element_rect(color = 'black', size=2),
legend.text = element_text(size = 10, colour = "black", face="bold"),
legend.margin = margin(6, 6, 6, 6),
axis.text.x = element_text(angle=0, size = 12, color = "black"),
axis.text.y = element_text(angle=0, size = 12, color = "black"),
)
path = paste("Comp_1/", "peak_vaue_psd_in_band", ".pdf", sep = "");
ggsave(path, width = 20, height = 10, units = "cm")
regresion_psd_in_band <- lm(PSD.in.band ~ poly(peak.value,2), data = data,subset=Type != "Qburst" )
summary(regresion_psd_in_band)
##############
##    VISIO
##########
ggplot(data = data, aes(x = peak.value, y = PSD.in.band, color=Type)) +
geom_point() +
#geom_polygon(data = hull_data, alpha = 1, aes(x = x, y = y,fill=cluster, linetype=cluster)) +
geom_smooth(linetype="dashed", color="darkred", method = "loess", formula = y ~ x) +
labs(x=expression(bold("Peak Value " ~ (pT))), y=expression(bold("Band Power - Around First SR" ~ (pT^2)))) + theme(
plot.title =  element_blank(),
axis.title.y =  element_blank(),
axis.title.x =  element_blank(),
axis.text.x =  element_blank(),
axis.text.y = element_blank(),
legend.position = "none"
)
path = paste("Comp_1/", "peak_vaue_psd_in_band_visio", ".pdf", sep = "");
ggsave(path, width = 20, height = 10, units = "cm")
######
##    PSD REST
######
ggplot(data = data, aes(x = peak.value, y = PSD.rest, color=Type)) +
geom_point() +
geom_smooth(linetype="dashed", color="darkred", method = "loess", formula = y ~ x) +
labs(x=expression(bold("Peak Value " ~ (pT))), y=expression(bold("Band Power - Rest of the Spectrum " ~ (pT^2)))) + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
legend.position = c(.1, .95),
legend.justification = c("top"),
legend.title = element_text(face = "bold",hjust = 0.5),
legend.box.just = "left",
legend.box.background = element_rect(color = 'black', size=2),
legend.text = element_text(size = 10, colour = "black", face="bold"),
legend.margin = margin(6, 6, 6, 6),
axis.text.x = element_text(angle=0, size = 12, color = "black"),
axis.text.y = element_text(angle=0, size = 12, color = "black"),
)
path = paste("Comp_1/", "peak_vaue_psd_rest", ".pdf", sep = "");
ggsave(path, width = 20, height = 10, units = "cm")
regresion_psd_rest <- lm(PSD.rest ~ poly(peak.value,2), data = data)
summary(regresion_psd_rest)
regresion_psd_rest <- lm(PSD.rest ~ poly(peak.value,2), data = data,  subset=Type != "Qburst")
summary(regresion_psd_rest)
######
##    RiseTime - T1
######
ggplot(data = data, aes(x = peak.value, y = T1, color=Type)) +
geom_point() +
geom_smooth(linetype="dashed", color="darkred", method = "loess", formula = y ~ x) +
labs(x=expression(bold("Peak Value " ~ (pT))), y=expression(bold("Band Power - Rest of the Spectrum " ~ (pT^2)))) + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
legend.position = c(.1, .95),
legend.justification = c("top"),
legend.title = element_text(face = "bold",hjust = 0.5),
legend.box.just = "left",
legend.box.background = element_rect(color = 'black', size=2),
legend.text = element_text(size = 10, colour = "black", face="bold"),
legend.margin = margin(6, 6, 6, 6),
axis.text.x = element_text(angle=0, size = 12, color = "black"),
axis.text.y = element_text(angle=0, size = 12, color = "black"),
)
path = paste("Comp_1/", "peak_vaue_rise_time", ".pdf", sep = "");
ggsave(path, width = 20, height = 15, units = "cm")
###################################
####
####      COMPARATION PART 2
####
#####################################
scatter_plot_peak_value <- function(data, aes_user, y_label, filename, option = 1)
{
theme_1 = theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(angle=0, size = 12, color = "black"),
axis.text.y = element_text(angle=0, size = 12, color = "black"),
legend.position = c(.5, .95),
legend.justification = c("top"),
legend.title = element_blank(),#element_text(face = "bold",hjust = 0.5),
#legend.box.just = "left",
#legend.box.background = element_rect(color = 'black', size=0),
legend.key = element_rect(fill = "white", colour = "black"),
legend.background = element_rect(fill="transparent"),
legend.text = element_text(size = 8, colour = "black", face="bold"),
legend.margin = margin(6, 6, 6, 6),
legend.direction="horizontal" )
theme_2 = theme(
plot.title =  element_blank(),
axis.title.y =  element_blank(),
axis.title.x =  element_blank(),
axis.text.x =  element_blank(),
axis.text.y = element_blank(),
legend.position = c(.5, .95),
legend.justification = c("top"),
legend.title = element_blank(),#element_text(face = "bold",hjust = 0.5),
#legend.box.just = "left",
#legend.box.background = element_rect(color = 'black', size=0),
legend.key = element_rect(fill = "white", colour = "black"),
legend.background = element_rect(fill="transparent"),
legend.text = element_text(size = 8, colour = "black", face="bold"),
legend.margin = margin(6, 6, 6, 6),
legend.direction="horizontal"
)
if (option == 1)
current_theme = theme_1;
if (option == 2)
current_theme = theme_2;
path = paste("Comp_2/", filename, ".pdf", sep = "")
#pdf(file=path)
ggplot(data = data,aes_user) +
geom_point()+
labs(x="Peak Value (pT)", y = y_label) + current_theme;
ggsave(path, width = 12, height = 8, units = "cm")
}
######
##    RISETIME
######
aes_user = aes(x = peak.value, y = RiseTime, color=Type);
y_label = "Rise Time (s)"
filename = "rise_time"
scatter_plot_peak_value(data, aes_user, y_label, filename)
######
##    visio
######
aes_user = aes(x = peak.value, y = RiseTime, color=Type);
y_label = "Rise Time (s)"
filename = "rise_time_visio"
scatter_plot_peak_value(data, aes_user, y_label, filename, 2)
##
##    FWHMT
##
aes_user = aes(x = peak.value, y = FWHMT, color=Type);
y_label = "FWHMT (s)"
filename = "fwhmt"
scatter_plot_peak_value(data, aes_user, y_label, filename);
##
##    Carrier
##
aes_user = aes(x = peak.value, y = instant.freq.carrier, color=Type);
y_label = "Instantaneous Frequency (Hz)"
filename = "carrier_f"
scatter_plot_peak_value(data, aes_user, y_label, filename);
####
##  Modulated
####
aes_user = aes(x = peak.value, y = instant.freq.mod, color=Type);
y_label = "Envelope Frequency (Hz)"
filename = "modulated_f"
scatter_plot_peak_value(data, aes_user, y_label, filename);
qqplot_scatter <-function(observed, expected, filename, name, limits) {
df <- data.frame( observed = observed,expected = expected)
ggplot(df) +
geom_point(aes(expected, observed), shape = 23, size = 4, color = "black", fill = "steelblue1", stroke = 0.3) +
geom_abline(intercept = 0, slope = 1, alpha = 0.9, size = 1.2, linetype=5) +
xlab(paste("Normal ", name, sep = "")) +
ylab(paste("Qburst ", name, sep = "")) +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
#plot.margin=grid::unit(c(0,0,0,0), "mm"),
#axis.title.y = element_text(color="black", size=14, face="bold", position = "none"),
#axis.title.x = element_text(color="black", size=14, face="bold"),
#axis.text.x = element_text(angle=0, size = 10, color = "black"),
#axis.text.y = element_text(angle=0, size = 10, color = "black")
) +
ylim(limits) +
xlim(limits)
path = paste("Comp_3/comp_3_", filename, ".pdf", sep = "");
ggsave(path, width = 12, height = 12, units = "cm")
}
####
##  FWHMT
####
observed = quantile(data$FWHMT[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$FWHMT[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "FWHMT (s)";
limits <- c(0,2);
qqplot_scatter(observed, expected, "FWHMT", name, limits)
####
##  T1
####
observed = quantile(data$T1[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$T1[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "Rise Time (s)";
limits <- c(0,0.5);
qqplot_scatter(observed, expected, "T1", name, limits)
####
##  PSD Rest band
####
observed = quantile(data$PSD.rest[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$PSD.rest[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "PSD Rest band (s)";
limits <- c(0,1e11);
qqplot_scatter(observed, expected, "PSD", name, limits)
####
##  peak Value
####
observed = quantile(data$peak.value[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$peak.value[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "Peak Value (pT)";
limits <- c(0,7e6);
qqplot_scatter(observed, expected, "peak_value", name, limits)
####
##  carrier_freq
####
observed = quantile(data$instant.freq.carrier[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$instant.freq.carrier[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "Instantaneous Frequency (Hz)";
limits <- c(6,10);
qqplot_scatter(observed, expected, "carrier_freq", name, limits)
####
##  mod_freq
####
observed = quantile(data$instant.freq.mod[data$Type == "Qburst"], probs = seq(0,1,by = 0.05));
expected = quantile(data$instant.freq.mod[data$Type == "Normal"], probs = seq(0,1,by = 0.05));
name = "Envelope Frequency (Hz)";
limits <- c(1.5,3);
qqplot_scatter(observed, expected, "mod_freq", name, limits)
ggplot(data = data, aes(x = T1, y = T2, color=Type)) +
geom_point() +
facet_wrap(~ Type)
ggplot(data, aes(FWHMT, fill=..count.. )) +
geom_histogram(alpha = 1, color = "black", breaks=seq(0,1e10,1.7e8), aes(y=..count..), size=1.1) +
geom_density(col= "black", fill = "lightblue", alpha=0, size = 1.5) +
xlim(c(0,1e10)) +
scale_fill_gradient("Count", low="lightgreen", high="darkgreen") +
labs(title="Correlation between PSD [6-10]Hz & Peak Value",
x="PSD [6 - 10]Hz AU", y = "Peak Value (pT)", color = "PSD") + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
)
observed = quantile(values[data$type == "qburst"], probs = seq(0,1,by = 0.01));
expected = quantile(values[data$type == "normal"], probs = seq(0,1,by = 0.01));
ggplot(data, aes(x=peak.value, y = SPC, fill=SPC)) +
geom_point(size=3, shape=23) +
geom_smooth(linetype="dashed", color="darkred") +
scale_colour_gradient(  low = "black",  high = "red" ) +
labs(title="Correlation between PSD [6 - 10]Hz nd Peak Value",
x="PSD [6 - 10]Hz AU", y = "Peak Value (pT)", color = "PSD") + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
legend.title = element_blank(),
legend.position = "none"
)
chaggplot(data, aes(x=peak.value, y=SPC)) +
geom_point(size=2, shape=18, color="darkred") +
geom_bin2d()
# Load the package
library(ggstatsplot)
# Create a boxplot of the dataset, outliers are shown as two distinct points
boxplot (data$instant.freq.mod)$out
ggbetweenstats(data,
SPC,instant.freq.mod, outlier.tagging = TRUE)
rm(list = ls())
source('ion_aux_func.r', echo=FALSE)
source('list_ml.R', echo=FALSE)
